/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.brml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.brml.bRML.AddRouteStop;
import org.xtext.example.brml.bRML.BRMLPackage;
import org.xtext.example.brml.bRML.Bus;
import org.xtext.example.brml.bRML.DelBus;
import org.xtext.example.brml.bRML.DelRoute;
import org.xtext.example.brml.bRML.DelStop;
import org.xtext.example.brml.bRML.DeleteRouteStop;
import org.xtext.example.brml.bRML.Location;
import org.xtext.example.brml.bRML.Model;
import org.xtext.example.brml.bRML.PrintBus;
import org.xtext.example.brml.bRML.PrintRoute;
import org.xtext.example.brml.bRML.PrintStop;
import org.xtext.example.brml.bRML.Route;
import org.xtext.example.brml.bRML.RouteStop;
import org.xtext.example.brml.bRML.Stop;
import org.xtext.example.brml.services.BRMLGrammarAccess;

@SuppressWarnings("all")
public class BRMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BRMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BRMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BRMLPackage.ADD_ROUTE_STOP:
				sequence_AddRouteStop(context, (AddRouteStop) semanticObject); 
				return; 
			case BRMLPackage.BUS:
				sequence_Bus(context, (Bus) semanticObject); 
				return; 
			case BRMLPackage.DEL_BUS:
				sequence_DelBus(context, (DelBus) semanticObject); 
				return; 
			case BRMLPackage.DEL_ROUTE:
				sequence_DelRoute(context, (DelRoute) semanticObject); 
				return; 
			case BRMLPackage.DEL_STOP:
				sequence_DelStop(context, (DelStop) semanticObject); 
				return; 
			case BRMLPackage.DELETE_ROUTE_STOP:
				sequence_DeleteRouteStop(context, (DeleteRouteStop) semanticObject); 
				return; 
			case BRMLPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case BRMLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BRMLPackage.PRINT_BUS:
				sequence_PrintBus(context, (PrintBus) semanticObject); 
				return; 
			case BRMLPackage.PRINT_ROUTE:
				sequence_PrintRoute(context, (PrintRoute) semanticObject); 
				return; 
			case BRMLPackage.PRINT_STOP:
				sequence_PrintStop(context, (PrintStop) semanticObject); 
				return; 
			case BRMLPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case BRMLPackage.ROUTE_STOP:
				sequence_RouteStop(context, (RouteStop) semanticObject); 
				return; 
			case BRMLPackage.STOP:
				sequence_Stop(context, (Stop) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns AddRouteStop
	 *     AddRouteStop returns AddRouteStop
	 *
	 * Constraint:
	 *     (routeStop=[Stop|ID] route=[Route|ID])
	 * </pre>
	 */
	protected void sequence_AddRouteStop(ISerializationContext context, AddRouteStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE_STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE_STOP));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddRouteStopAccess().getRouteStopStopIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE_STOP, false));
		feeder.accept(grammarAccess.getAddRouteStopAccess().getRouteRouteIDTerminalRuleCall_3_0_1(), semanticObject.eGet(BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Bus
	 *     Bus returns Bus
	 *
	 * Constraint:
	 *     (bus=STRING driver=STRING route=[Route|ID])
	 * </pre>
	 */
	protected void sequence_Bus(ISerializationContext context, Bus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.BUS__BUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.BUS__BUS));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.BUS__DRIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.BUS__DRIVER));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.BUS__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.BUS__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBusAccess().getBusSTRINGTerminalRuleCall_1_0(), semanticObject.getBus());
		feeder.accept(grammarAccess.getBusAccess().getDriverSTRINGTerminalRuleCall_3_0(), semanticObject.getDriver());
		feeder.accept(grammarAccess.getBusAccess().getRouteRouteIDTerminalRuleCall_5_0_1(), semanticObject.eGet(BRMLPackage.Literals.BUS__ROUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns DelBus
	 *     DelBus returns DelBus
	 *
	 * Constraint:
	 *     (bus=[Bus|ID] bus=[Bus|STRING])
	 * </pre>
	 */
	protected void sequence_DelBus(ISerializationContext context, DelBus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns DelRoute
	 *     DelRoute returns DelRoute
	 *
	 * Constraint:
	 *     route=[Route|ID]
	 * </pre>
	 */
	protected void sequence_DelRoute(ISerializationContext context, DelRoute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.DEL_ROUTE__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.DEL_ROUTE__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelRouteAccess().getRouteRouteIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.DEL_ROUTE__ROUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns DelStop
	 *     DelStop returns DelStop
	 *
	 * Constraint:
	 *     stop=[Stop|STRING]
	 * </pre>
	 */
	protected void sequence_DelStop(ISerializationContext context, DelStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.DEL_STOP__STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.DEL_STOP__STOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelStopAccess().getStopStopSTRINGTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.DEL_STOP__STOP, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns DeleteRouteStop
	 *     DeleteRouteStop returns DeleteRouteStop
	 *
	 * Constraint:
	 *     (routeStop=[Stop|ID] route=[Route|ID])
	 * </pre>
	 */
	protected void sequence_DeleteRouteStop(ISerializationContext context, DeleteRouteStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE_STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE_STOP));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteRouteStopAccess().getRouteStopStopIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE_STOP, false));
		feeder.accept(grammarAccess.getDeleteRouteStopAccess().getRouteRouteIDTerminalRuleCall_3_0_1(), semanticObject.eGet(BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (latitude=STRING longitude=STRING)
	 * </pre>
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.LOCATION__LATITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.LOCATION__LATITUDE));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.LOCATION__LONGITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.LOCATION__LONGITUDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocationAccess().getLatitudeSTRINGTerminalRuleCall_1_0(), semanticObject.getLatitude());
		feeder.accept(grammarAccess.getLocationAccess().getLongitudeSTRINGTerminalRuleCall_3_0(), semanticObject.getLongitude());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     operations+=Operation+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns PrintBus
	 *     PrintBus returns PrintBus
	 *
	 * Constraint:
	 *     bus=[Bus|ID]
	 * </pre>
	 */
	protected void sequence_PrintBus(ISerializationContext context, PrintBus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.PRINT_BUS__BUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.PRINT_BUS__BUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintBusAccess().getBusBusIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.PRINT_BUS__BUS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns PrintRoute
	 *     PrintRoute returns PrintRoute
	 *
	 * Constraint:
	 *     route=[Route|ID]
	 * </pre>
	 */
	protected void sequence_PrintRoute(ISerializationContext context, PrintRoute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.PRINT_ROUTE__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.PRINT_ROUTE__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintRouteAccess().getRouteRouteIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.PRINT_ROUTE__ROUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns PrintStop
	 *     PrintStop returns PrintStop
	 *
	 * Constraint:
	 *     stop=[Stop|ID]
	 * </pre>
	 */
	protected void sequence_PrintStop(ISerializationContext context, PrintStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.PRINT_STOP__STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.PRINT_STOP__STOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintStopAccess().getStopStopIDTerminalRuleCall_1_0_1(), semanticObject.eGet(BRMLPackage.Literals.PRINT_STOP__STOP, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RouteStop returns RouteStop
	 *
	 * Constraint:
	 *     routestop=[Stop|STRING]
	 * </pre>
	 */
	protected void sequence_RouteStop(ISerializationContext context, RouteStop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.ROUTE_STOP__ROUTESTOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.ROUTE_STOP__ROUTESTOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRouteStopAccess().getRoutestopStopSTRINGTerminalRuleCall_0_1(), semanticObject.eGet(BRMLPackage.Literals.ROUTE_STOP__ROUTESTOP, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Route
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (route=INT routeStops+=RouteStop+)
	 * </pre>
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Stop
	 *     Stop returns Stop
	 *
	 * Constraint:
	 *     (stop=STRING location=Location)
	 * </pre>
	 */
	protected void sequence_Stop(ISerializationContext context, Stop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.STOP__STOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.STOP__STOP));
			if (transientValues.isValueTransient(semanticObject, BRMLPackage.Literals.STOP__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BRMLPackage.Literals.STOP__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStopAccess().getStopSTRINGTerminalRuleCall_1_0(), semanticObject.getStop());
		feeder.accept(grammarAccess.getStopAccess().getLocationLocationParserRuleCall_3_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
}
