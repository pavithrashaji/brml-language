/*
* generated by Xtext 2.32.0
*/
package org.xtext.example.brml.validation;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.brml.bRML.*;
import java.util.*;
/**
* This class contains custom validation rules.
*
* See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
*/
public class BRMLValidator extends AbstractBRMLValidator {
	
   @Check
   public void checkStopsExistInRoute(Route route) {
       for (RouteStop routeStop : route.getRouteStops()) {
           String stop = routeStop.getRoutestop().getStop();
           if (stop == null) {
               error("Stop '" + routeStop.getRoutestop().getStop() + "' does not exist",
                     BRMLPackage.Literals.ROUTE__ROUTE_STOPS,
                     BRMLPackage.Literals.ROUTE_STOP__ROUTESTOP);
           }
       }
   }
  
   @Check
   public void checkUniqueRouteNumbers(Model model) {
       HashSet<Integer> routeNumbers = new HashSet<Integer>();
       for (Operation operation : model.getOperations()) {
           if (operation instanceof Route) {
               Route route = (Route) operation;
               int routeNumber = route.getRoute();
               if (routeNumbers.contains(routeNumber)) {
                   error("Duplicate route number: " + routeNumber, route, BRMLPackage.Literals.ROUTE__ROUTE);
               } else {
                   routeNumbers.add(routeNumber);
               }
           }
       }
   }
   @Check
   public void checkUniqueStopNames(Stop stop) {
       Model model = (Model) stop.eContainer();
       Set<String> stopNames = new HashSet<>();
       for (Operation operation : model.getOperations()) {
           if (operation instanceof Stop) {
               Stop otherStop = (Stop) operation;
               String otherStopName = otherStop.getStop();
               if (otherStop != stop && stopNames.contains(otherStopName)) {
                   error("Each bus stop should have a unique name",
                         BRMLPackage.Literals.STOP__STOP);
                   return;
               }
               stopNames.add(otherStopName);
           }
       }
   }
  
   @Check
   public void checkUniqueStopNamesInRoute(Route route) {
       Set<String> stopNames = new HashSet<>();
       for (RouteStop routeStop : route.getRouteStops()) {
           String stopName = routeStop.getRoutestop().getStop();
           if (!stopNames.add(stopName)) {
               error("Each bus stop in a route must have a unique name",
                     BRMLPackage.Literals.ROUTE_STOP__ROUTESTOP);
           }
       }
   }
   @Check
   public void checkRouteExistenceInAddRouteStop(AddRouteStop addRouteStop) {
       Route route = addRouteStop.getRoute();
       if (route == null) {
           error("Route does not exist", BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE);
       }
   }
   @Check
   public void checkRouteExistenceInDeleteRouteStop(DeleteRouteStop deleteRouteStop) {
       Route route = deleteRouteStop.getRoute();
       if (route == null) {
           error("Route does not exist", BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE);
       }
   }
  
   @Check
   public void checkStopExistenceInAddRouteStop(AddRouteStop addRouteStop) {
       Stop stop = addRouteStop.getRouteStop();
       if (stop == null) {
           error("Stop does not exist", BRMLPackage.Literals.ADD_ROUTE_STOP__ROUTE_STOP);
       }
   }
  
   @Check
   public void checkMinimumStopsInRoute(DeleteRouteStop deleteRouteStop) {
       Route route = deleteRouteStop.getRoute();
       if (route != null && route.getRouteStops().size() <= 2) {
           error("Cannot delete stop from route with less than or equal to 2 stops", BRMLPackage.Literals.DELETE_ROUTE_STOP__ROUTE);
       }
   }
  
   @Check
   public void checkMinimumStopsForRoute(Route route) {
       if (route.getRouteStops().size() < 2) {
           error("A route must have at least 2 stops", BRMLPackage.Literals.ROUTE__ROUTE_STOPS);
       }
   }
  
   @Check
   public void checkDifferentLocations(Stop stop) {
       Model model = (Model) stop.eContainer();
       for (Operation operation : model.getOperations()) {
           if (operation instanceof Stop) {
               Stop otherStop = (Stop) operation;
               if (otherStop != stop && otherStop.getLocation() != null && stop.getLocation() != null &&
                       otherStop.getLocation().getLatitude().equals(stop.getLocation().getLatitude()) &&
                       otherStop.getLocation().getLongitude().equals(stop.getLocation().getLongitude())) {
                   error("Two stops cannot have the same location",
                           BRMLPackage.Literals.STOP__LOCATION,
                           BRMLPackage.Literals.LOCATION__LATITUDE);
               }
           }
       }
   }
  
   @Check
   public void checkBusNameFormat(Bus bus) {
       String busName = bus.getBus();
       if (busName != null && !busName.matches("[A-Za-z]{3}[0-9]{4}")) {
           error("Bus name must consist of 3 alpha characters followed by 4 numbers",
                   BRMLPackage.Literals.BUS__BUS);
       }
   }
  
   @Check
   public void checkBusRouteFormat(Bus bus) {
       int routeNumber = bus.getRoute().getRoute();
       if (routeNumber > 9999) {
           error("Bus route must be a maximum of 4 digits",
                 BRMLPackage.Literals.BUS__ROUTE,
                 BRMLPackage.Literals.ROUTE__ROUTE);
       }
   }
  
   @Check
   public void checkStopDeletion(Stop stop) {
       Model model = (Model) stop.eContainer();
       for (Operation operation : model.getOperations()) {
           if (operation instanceof Bus) {
               Bus bus = (Bus) operation;
               for (RouteStop routeStop : bus.getRoute().getRouteStops()) {
                   if (routeStop.getRoutestop().getStop().equals(stop)) {
                       error("Cannot delete stop that is part of a bus route",
                             BRMLPackage.Literals.STOP__STOP);
                   }
               }
           }
       }
   }
  
  
}

