/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.brml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.brml.ide.contentassist.antlr.internal.InternalBRMLParser;
import org.xtext.example.brml.services.BRMLGrammarAccess;

public class BRMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BRMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BRMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getStopAccess().getGroup(), "rule__Stop__Group__0");
			builder.put(grammarAccess.getDelStopAccess().getGroup(), "rule__DelStop__Group__0");
			builder.put(grammarAccess.getRouteAccess().getGroup(), "rule__Route__Group__0");
			builder.put(grammarAccess.getBusAccess().getGroup(), "rule__Bus__Group__0");
			builder.put(grammarAccess.getDelRouteAccess().getGroup(), "rule__DelRoute__Group__0");
			builder.put(grammarAccess.getDelBusAccess().getGroup(), "rule__DelBus__Group__0");
			builder.put(grammarAccess.getLocationAccess().getGroup(), "rule__Location__Group__0");
			builder.put(grammarAccess.getAddRouteStopAccess().getGroup(), "rule__AddRouteStop__Group__0");
			builder.put(grammarAccess.getDeleteRouteStopAccess().getGroup(), "rule__DeleteRouteStop__Group__0");
			builder.put(grammarAccess.getPrintRouteAccess().getGroup(), "rule__PrintRoute__Group__0");
			builder.put(grammarAccess.getPrintBusAccess().getGroup(), "rule__PrintBus__Group__0");
			builder.put(grammarAccess.getPrintStopAccess().getGroup(), "rule__PrintStop__Group__0");
			builder.put(grammarAccess.getModelAccess().getOperationsAssignment(), "rule__Model__OperationsAssignment");
			builder.put(grammarAccess.getStopAccess().getStopAssignment_1(), "rule__Stop__StopAssignment_1");
			builder.put(grammarAccess.getStopAccess().getLocationAssignment_3(), "rule__Stop__LocationAssignment_3");
			builder.put(grammarAccess.getDelStopAccess().getStopAssignment_1(), "rule__DelStop__StopAssignment_1");
			builder.put(grammarAccess.getRouteAccess().getRouteAssignment_1(), "rule__Route__RouteAssignment_1");
			builder.put(grammarAccess.getRouteAccess().getRouteStopsAssignment_3(), "rule__Route__RouteStopsAssignment_3");
			builder.put(grammarAccess.getRouteStopAccess().getRoutestopAssignment(), "rule__RouteStop__RoutestopAssignment");
			builder.put(grammarAccess.getBusAccess().getBusAssignment_1(), "rule__Bus__BusAssignment_1");
			builder.put(grammarAccess.getBusAccess().getDriverAssignment_3(), "rule__Bus__DriverAssignment_3");
			builder.put(grammarAccess.getBusAccess().getRouteAssignment_5(), "rule__Bus__RouteAssignment_5");
			builder.put(grammarAccess.getDelRouteAccess().getRouteAssignment_1(), "rule__DelRoute__RouteAssignment_1");
			builder.put(grammarAccess.getDelBusAccess().getBusAssignment_1(), "rule__DelBus__BusAssignment_1");
			builder.put(grammarAccess.getDelBusAccess().getBusAssignment_2(), "rule__DelBus__BusAssignment_2");
			builder.put(grammarAccess.getLocationAccess().getLatitudeAssignment_1(), "rule__Location__LatitudeAssignment_1");
			builder.put(grammarAccess.getLocationAccess().getLongitudeAssignment_3(), "rule__Location__LongitudeAssignment_3");
			builder.put(grammarAccess.getAddRouteStopAccess().getRouteStopAssignment_1(), "rule__AddRouteStop__RouteStopAssignment_1");
			builder.put(grammarAccess.getAddRouteStopAccess().getRouteAssignment_3(), "rule__AddRouteStop__RouteAssignment_3");
			builder.put(grammarAccess.getDeleteRouteStopAccess().getRouteStopAssignment_1(), "rule__DeleteRouteStop__RouteStopAssignment_1");
			builder.put(grammarAccess.getDeleteRouteStopAccess().getRouteAssignment_3(), "rule__DeleteRouteStop__RouteAssignment_3");
			builder.put(grammarAccess.getPrintRouteAccess().getRouteAssignment_1(), "rule__PrintRoute__RouteAssignment_1");
			builder.put(grammarAccess.getPrintBusAccess().getBusAssignment_1(), "rule__PrintBus__BusAssignment_1");
			builder.put(grammarAccess.getPrintStopAccess().getStopAssignment_1(), "rule__PrintStop__StopAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BRMLGrammarAccess grammarAccess;

	@Override
	protected InternalBRMLParser createParser() {
		InternalBRMLParser result = new InternalBRMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BRMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BRMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
