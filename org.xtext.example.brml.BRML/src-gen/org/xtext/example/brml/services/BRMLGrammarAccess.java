/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.brml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BRMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Model");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//Model:
		//   (operations+=Operation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(operations+=Operation)*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_0() { return cOperationsOperationParserRuleCall_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRouteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddRouteStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteRouteStopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDelRouteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDelBusParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDelStopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPrintRouteParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPrintBusParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPrintStopParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Operation:
		//   Route | Bus | Stop | AddRouteStop | DeleteRouteStop | DelRoute | DelBus | DelStop | PrintRoute | PrintBus | PrintStop;
		@Override public ParserRule getRule() { return rule; }
		
		//Route | Bus | Stop | AddRouteStop | DeleteRouteStop | DelRoute | DelBus | DelStop | PrintRoute | PrintBus | PrintStop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Route
		public RuleCall getRouteParserRuleCall_0() { return cRouteParserRuleCall_0; }
		
		//Bus
		public RuleCall getBusParserRuleCall_1() { return cBusParserRuleCall_1; }
		
		//Stop
		public RuleCall getStopParserRuleCall_2() { return cStopParserRuleCall_2; }
		
		//AddRouteStop
		public RuleCall getAddRouteStopParserRuleCall_3() { return cAddRouteStopParserRuleCall_3; }
		
		//DeleteRouteStop
		public RuleCall getDeleteRouteStopParserRuleCall_4() { return cDeleteRouteStopParserRuleCall_4; }
		
		//DelRoute
		public RuleCall getDelRouteParserRuleCall_5() { return cDelRouteParserRuleCall_5; }
		
		//DelBus
		public RuleCall getDelBusParserRuleCall_6() { return cDelBusParserRuleCall_6; }
		
		//DelStop
		public RuleCall getDelStopParserRuleCall_7() { return cDelStopParserRuleCall_7; }
		
		//PrintRoute
		public RuleCall getPrintRouteParserRuleCall_8() { return cPrintRouteParserRuleCall_8; }
		
		//PrintBus
		public RuleCall getPrintBusParserRuleCall_9() { return cPrintBusParserRuleCall_9; }
		
		//PrintStop
		public RuleCall getPrintStopParserRuleCall_10() { return cPrintStopParserRuleCall_10; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDSTOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStopSTRINGTerminalRuleCall_1_0 = (RuleCall)cStopAssignment_1.eContents().get(0);
		private final Keyword cATKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationLocationParserRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		
		//Stop:
		//   'ADD STOP' stop=STRING 'AT' location=Location;
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD STOP' stop=STRING 'AT' location=Location
		public Group getGroup() { return cGroup; }
		
		//'ADD STOP'
		public Keyword getADDSTOPKeyword_0() { return cADDSTOPKeyword_0; }
		
		//stop=STRING
		public Assignment getStopAssignment_1() { return cStopAssignment_1; }
		
		//STRING
		public RuleCall getStopSTRINGTerminalRuleCall_1_0() { return cStopSTRINGTerminalRuleCall_1_0; }
		
		//'AT'
		public Keyword getATKeyword_2() { return cATKeyword_2; }
		
		//location=Location
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_3_0() { return cLocationLocationParserRuleCall_3_0; }
	}
	public class DelStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.DelStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETESTOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStopStopCrossReference_1_0 = (CrossReference)cStopAssignment_1.eContents().get(0);
		private final RuleCall cStopStopSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cStopStopCrossReference_1_0.eContents().get(1);
		
		//DelStop:
		//   'DELETE STOP' stop=[Stop|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE STOP' stop=[Stop|STRING]
		public Group getGroup() { return cGroup; }
		
		//'DELETE STOP'
		public Keyword getDELETESTOPKeyword_0() { return cDELETESTOPKeyword_0; }
		
		//stop=[Stop|STRING]
		public Assignment getStopAssignment_1() { return cStopAssignment_1; }
		
		//[Stop|STRING]
		public CrossReference getStopStopCrossReference_1_0() { return cStopStopCrossReference_1_0; }
		
		//STRING
		public RuleCall getStopStopSTRINGTerminalRuleCall_1_0_1() { return cStopStopSTRINGTerminalRuleCall_1_0_1; }
	}
	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDROUTEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRouteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRouteINTTerminalRuleCall_1_0 = (RuleCall)cRouteAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRouteStopsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRouteStopsRouteStopParserRuleCall_3_0 = (RuleCall)cRouteStopsAssignment_3.eContents().get(0);
		
		//Route:
		//    'ADD ROUTE' route=INT ':' (routeStops+=RouteStop)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD ROUTE' route=INT ':' (routeStops+=RouteStop)+
		public Group getGroup() { return cGroup; }
		
		//'ADD ROUTE'
		public Keyword getADDROUTEKeyword_0() { return cADDROUTEKeyword_0; }
		
		//route=INT
		public Assignment getRouteAssignment_1() { return cRouteAssignment_1; }
		
		//INT
		public RuleCall getRouteINTTerminalRuleCall_1_0() { return cRouteINTTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(routeStops+=RouteStop)+
		public Assignment getRouteStopsAssignment_3() { return cRouteStopsAssignment_3; }
		
		//RouteStop
		public RuleCall getRouteStopsRouteStopParserRuleCall_3_0() { return cRouteStopsRouteStopParserRuleCall_3_0; }
	}
	public class RouteStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.RouteStop");
		private final Assignment cRoutestopAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRoutestopStopCrossReference_0 = (CrossReference)cRoutestopAssignment.eContents().get(0);
		private final RuleCall cRoutestopStopSTRINGTerminalRuleCall_0_1 = (RuleCall)cRoutestopStopCrossReference_0.eContents().get(1);
		
		//RouteStop:
		//   routestop=[Stop|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//routestop=[Stop|STRING]
		public Assignment getRoutestopAssignment() { return cRoutestopAssignment; }
		
		//[Stop|STRING]
		public CrossReference getRoutestopStopCrossReference_0() { return cRoutestopStopCrossReference_0; }
		
		//STRING
		public RuleCall getRoutestopStopSTRINGTerminalRuleCall_0_1() { return cRoutestopStopSTRINGTerminalRuleCall_0_1; }
	}
	public class BusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Bus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDBUSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBusSTRINGTerminalRuleCall_1_0 = (RuleCall)cBusAssignment_1.eContents().get(0);
		private final Keyword cDRIVENBYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDriverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDriverSTRINGTerminalRuleCall_3_0 = (RuleCall)cDriverAssignment_3.eContents().get(0);
		private final Keyword cONROUTEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRouteAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRouteRouteCrossReference_5_0 = (CrossReference)cRouteAssignment_5.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_5_0_1 = (RuleCall)cRouteRouteCrossReference_5_0.eContents().get(1);
		
		//Bus:
		//   'ADD BUS' bus=STRING 'DRIVEN BY' driver=STRING 'ON ROUTE' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD BUS' bus=STRING 'DRIVEN BY' driver=STRING 'ON ROUTE' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//'ADD BUS'
		public Keyword getADDBUSKeyword_0() { return cADDBUSKeyword_0; }
		
		//bus=STRING
		public Assignment getBusAssignment_1() { return cBusAssignment_1; }
		
		//STRING
		public RuleCall getBusSTRINGTerminalRuleCall_1_0() { return cBusSTRINGTerminalRuleCall_1_0; }
		
		//'DRIVEN BY'
		public Keyword getDRIVENBYKeyword_2() { return cDRIVENBYKeyword_2; }
		
		//driver=STRING
		public Assignment getDriverAssignment_3() { return cDriverAssignment_3; }
		
		//STRING
		public RuleCall getDriverSTRINGTerminalRuleCall_3_0() { return cDriverSTRINGTerminalRuleCall_3_0; }
		
		//'ON ROUTE'
		public Keyword getONROUTEKeyword_4() { return cONROUTEKeyword_4; }
		
		//route=[Route]
		public Assignment getRouteAssignment_5() { return cRouteAssignment_5; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_5_0() { return cRouteRouteCrossReference_5_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_5_0_1() { return cRouteRouteIDTerminalRuleCall_5_0_1; }
	}
	public class DelRouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.DelRoute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEROUTEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRouteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRouteRouteCrossReference_1_0 = (CrossReference)cRouteAssignment_1.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_1_0_1 = (RuleCall)cRouteRouteCrossReference_1_0.eContents().get(1);
		
		//DelRoute:
		//   'DELETE ROUTE' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE ROUTE' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//'DELETE ROUTE'
		public Keyword getDELETEROUTEKeyword_0() { return cDELETEROUTEKeyword_0; }
		
		//route=[Route]
		public Assignment getRouteAssignment_1() { return cRouteAssignment_1; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_1_0() { return cRouteRouteCrossReference_1_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_1_0_1() { return cRouteRouteIDTerminalRuleCall_1_0_1; }
	}
	public class DelBusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.DelBus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEBUSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBusBusCrossReference_1_0 = (CrossReference)cBusAssignment_1.eContents().get(0);
		private final RuleCall cBusBusIDTerminalRuleCall_1_0_1 = (RuleCall)cBusBusCrossReference_1_0.eContents().get(1);
		private final Assignment cBusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBusBusCrossReference_2_0 = (CrossReference)cBusAssignment_2.eContents().get(0);
		private final RuleCall cBusBusSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cBusBusCrossReference_2_0.eContents().get(1);
		
		//DelBus:
		//   'DELETE BUS' bus=[Bus] bus=[Bus|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE BUS' bus=[Bus] bus=[Bus|STRING]
		public Group getGroup() { return cGroup; }
		
		//'DELETE BUS'
		public Keyword getDELETEBUSKeyword_0() { return cDELETEBUSKeyword_0; }
		
		//bus=[Bus]
		public Assignment getBusAssignment_1() { return cBusAssignment_1; }
		
		//[Bus]
		public CrossReference getBusBusCrossReference_1_0() { return cBusBusCrossReference_1_0; }
		
		//ID
		public RuleCall getBusBusIDTerminalRuleCall_1_0_1() { return cBusBusIDTerminalRuleCall_1_0_1; }
		
		//bus=[Bus|STRING]
		public Assignment getBusAssignment_2() { return cBusAssignment_2; }
		
		//[Bus|STRING]
		public CrossReference getBusBusCrossReference_2_0() { return cBusBusCrossReference_2_0; }
		
		//STRING
		public RuleCall getBusBusSTRINGTerminalRuleCall_2_0_1() { return cBusBusSTRINGTerminalRuleCall_2_0_1; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCATIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLatitudeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLatitudeSTRINGTerminalRuleCall_1_0 = (RuleCall)cLatitudeAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLongitudeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLongitudeSTRINGTerminalRuleCall_3_0 = (RuleCall)cLongitudeAssignment_3.eContents().get(0);
		
		//Location:
		//   'LOCATION' latitude=STRING ',' longitude=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'LOCATION' latitude=STRING ',' longitude=STRING
		public Group getGroup() { return cGroup; }
		
		//'LOCATION'
		public Keyword getLOCATIONKeyword_0() { return cLOCATIONKeyword_0; }
		
		//latitude=STRING
		public Assignment getLatitudeAssignment_1() { return cLatitudeAssignment_1; }
		
		//STRING
		public RuleCall getLatitudeSTRINGTerminalRuleCall_1_0() { return cLatitudeSTRINGTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//longitude=STRING
		public Assignment getLongitudeAssignment_3() { return cLongitudeAssignment_3; }
		
		//STRING
		public RuleCall getLongitudeSTRINGTerminalRuleCall_3_0() { return cLongitudeSTRINGTerminalRuleCall_3_0; }
	}
	public class AddRouteStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.AddRouteStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDROUTESTOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRouteStopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRouteStopStopCrossReference_1_0 = (CrossReference)cRouteStopAssignment_1.eContents().get(0);
		private final RuleCall cRouteStopStopIDTerminalRuleCall_1_0_1 = (RuleCall)cRouteStopStopCrossReference_1_0.eContents().get(1);
		private final Keyword cTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRouteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRouteRouteCrossReference_3_0 = (CrossReference)cRouteAssignment_3.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_3_0_1 = (RuleCall)cRouteRouteCrossReference_3_0.eContents().get(1);
		
		//AddRouteStop:
		//   'ADD ROUTE STOP' routeStop=[Stop] 'TO' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//'ADD ROUTE STOP' routeStop=[Stop] 'TO' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//'ADD ROUTE STOP'
		public Keyword getADDROUTESTOPKeyword_0() { return cADDROUTESTOPKeyword_0; }
		
		//routeStop=[Stop]
		public Assignment getRouteStopAssignment_1() { return cRouteStopAssignment_1; }
		
		//[Stop]
		public CrossReference getRouteStopStopCrossReference_1_0() { return cRouteStopStopCrossReference_1_0; }
		
		//ID
		public RuleCall getRouteStopStopIDTerminalRuleCall_1_0_1() { return cRouteStopStopIDTerminalRuleCall_1_0_1; }
		
		//'TO'
		public Keyword getTOKeyword_2() { return cTOKeyword_2; }
		
		//route=[Route]
		public Assignment getRouteAssignment_3() { return cRouteAssignment_3; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_3_0() { return cRouteRouteCrossReference_3_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_3_0_1() { return cRouteRouteIDTerminalRuleCall_3_0_1; }
	}
	public class DeleteRouteStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.DeleteRouteStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEROUTESTOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRouteStopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRouteStopStopCrossReference_1_0 = (CrossReference)cRouteStopAssignment_1.eContents().get(0);
		private final RuleCall cRouteStopStopIDTerminalRuleCall_1_0_1 = (RuleCall)cRouteStopStopCrossReference_1_0.eContents().get(1);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRouteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRouteRouteCrossReference_3_0 = (CrossReference)cRouteAssignment_3.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_3_0_1 = (RuleCall)cRouteRouteCrossReference_3_0.eContents().get(1);
		
		//DeleteRouteStop:
		//   'DELETE ROUTE STOP' routeStop=[Stop] 'FROM' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE ROUTE STOP' routeStop=[Stop] 'FROM' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//'DELETE ROUTE STOP'
		public Keyword getDELETEROUTESTOPKeyword_0() { return cDELETEROUTESTOPKeyword_0; }
		
		//routeStop=[Stop]
		public Assignment getRouteStopAssignment_1() { return cRouteStopAssignment_1; }
		
		//[Stop]
		public CrossReference getRouteStopStopCrossReference_1_0() { return cRouteStopStopCrossReference_1_0; }
		
		//ID
		public RuleCall getRouteStopStopIDTerminalRuleCall_1_0_1() { return cRouteStopStopIDTerminalRuleCall_1_0_1; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//route=[Route]
		public Assignment getRouteAssignment_3() { return cRouteAssignment_3; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_3_0() { return cRouteRouteCrossReference_3_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_3_0_1() { return cRouteRouteIDTerminalRuleCall_3_0_1; }
	}
	public class PrintRouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.PrintRoute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTROUTEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRouteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRouteRouteCrossReference_1_0 = (CrossReference)cRouteAssignment_1.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_1_0_1 = (RuleCall)cRouteRouteCrossReference_1_0.eContents().get(1);
		
		//PrintRoute:
		//   'PRINT ROUTE' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT ROUTE' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//'PRINT ROUTE'
		public Keyword getPRINTROUTEKeyword_0() { return cPRINTROUTEKeyword_0; }
		
		//route=[Route]
		public Assignment getRouteAssignment_1() { return cRouteAssignment_1; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_1_0() { return cRouteRouteCrossReference_1_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_1_0_1() { return cRouteRouteIDTerminalRuleCall_1_0_1; }
	}
	public class PrintBusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.PrintBus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTBUSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBusBusCrossReference_1_0 = (CrossReference)cBusAssignment_1.eContents().get(0);
		private final RuleCall cBusBusIDTerminalRuleCall_1_0_1 = (RuleCall)cBusBusCrossReference_1_0.eContents().get(1);
		
		//PrintBus:
		//   'PRINT BUS' bus=[Bus];
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT BUS' bus=[Bus]
		public Group getGroup() { return cGroup; }
		
		//'PRINT BUS'
		public Keyword getPRINTBUSKeyword_0() { return cPRINTBUSKeyword_0; }
		
		//bus=[Bus]
		public Assignment getBusAssignment_1() { return cBusAssignment_1; }
		
		//[Bus]
		public CrossReference getBusBusCrossReference_1_0() { return cBusBusCrossReference_1_0; }
		
		//ID
		public RuleCall getBusBusIDTerminalRuleCall_1_0_1() { return cBusBusIDTerminalRuleCall_1_0_1; }
	}
	public class PrintStopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.brml.BRML.PrintStop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRINTSTOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStopStopCrossReference_1_0 = (CrossReference)cStopAssignment_1.eContents().get(0);
		private final RuleCall cStopStopIDTerminalRuleCall_1_0_1 = (RuleCall)cStopStopCrossReference_1_0.eContents().get(1);
		
		//PrintStop:
		//   'PRINT STOP' stop=[Stop];
		@Override public ParserRule getRule() { return rule; }
		
		//'PRINT STOP' stop=[Stop]
		public Group getGroup() { return cGroup; }
		
		//'PRINT STOP'
		public Keyword getPRINTSTOPKeyword_0() { return cPRINTSTOPKeyword_0; }
		
		//stop=[Stop]
		public Assignment getStopAssignment_1() { return cStopAssignment_1; }
		
		//[Stop]
		public CrossReference getStopStopCrossReference_1_0() { return cStopStopCrossReference_1_0; }
		
		//ID
		public RuleCall getStopStopIDTerminalRuleCall_1_0_1() { return cStopStopIDTerminalRuleCall_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final OperationElements pOperation;
	private final StopElements pStop;
	private final DelStopElements pDelStop;
	private final RouteElements pRoute;
	private final RouteStopElements pRouteStop;
	private final BusElements pBus;
	private final DelRouteElements pDelRoute;
	private final DelBusElements pDelBus;
	private final LocationElements pLocation;
	private final AddRouteStopElements pAddRouteStop;
	private final DeleteRouteStopElements pDeleteRouteStop;
	private final PrintRouteElements pPrintRoute;
	private final PrintBusElements pPrintBus;
	private final PrintStopElements pPrintStop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BRMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pOperation = new OperationElements();
		this.pStop = new StopElements();
		this.pDelStop = new DelStopElements();
		this.pRoute = new RouteElements();
		this.pRouteStop = new RouteStopElements();
		this.pBus = new BusElements();
		this.pDelRoute = new DelRouteElements();
		this.pDelBus = new DelBusElements();
		this.pLocation = new LocationElements();
		this.pAddRouteStop = new AddRouteStopElements();
		this.pDeleteRouteStop = new DeleteRouteStopElements();
		this.pPrintRoute = new PrintRouteElements();
		this.pPrintBus = new PrintBusElements();
		this.pPrintStop = new PrintStopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.brml.BRML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//   (operations+=Operation)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Operation:
	//   Route | Bus | Stop | AddRouteStop | DeleteRouteStop | DelRoute | DelBus | DelStop | PrintRoute | PrintBus | PrintStop;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Stop:
	//   'ADD STOP' stop=STRING 'AT' location=Location;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//DelStop:
	//   'DELETE STOP' stop=[Stop|STRING];
	public DelStopElements getDelStopAccess() {
		return pDelStop;
	}
	
	public ParserRule getDelStopRule() {
		return getDelStopAccess().getRule();
	}
	
	//Route:
	//    'ADD ROUTE' route=INT ':' (routeStops+=RouteStop)+;
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}
	
	//RouteStop:
	//   routestop=[Stop|STRING];
	public RouteStopElements getRouteStopAccess() {
		return pRouteStop;
	}
	
	public ParserRule getRouteStopRule() {
		return getRouteStopAccess().getRule();
	}
	
	//Bus:
	//   'ADD BUS' bus=STRING 'DRIVEN BY' driver=STRING 'ON ROUTE' route=[Route];
	public BusElements getBusAccess() {
		return pBus;
	}
	
	public ParserRule getBusRule() {
		return getBusAccess().getRule();
	}
	
	//DelRoute:
	//   'DELETE ROUTE' route=[Route];
	public DelRouteElements getDelRouteAccess() {
		return pDelRoute;
	}
	
	public ParserRule getDelRouteRule() {
		return getDelRouteAccess().getRule();
	}
	
	//DelBus:
	//   'DELETE BUS' bus=[Bus] bus=[Bus|STRING];
	public DelBusElements getDelBusAccess() {
		return pDelBus;
	}
	
	public ParserRule getDelBusRule() {
		return getDelBusAccess().getRule();
	}
	
	//Location:
	//   'LOCATION' latitude=STRING ',' longitude=STRING;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//AddRouteStop:
	//   'ADD ROUTE STOP' routeStop=[Stop] 'TO' route=[Route];
	public AddRouteStopElements getAddRouteStopAccess() {
		return pAddRouteStop;
	}
	
	public ParserRule getAddRouteStopRule() {
		return getAddRouteStopAccess().getRule();
	}
	
	//DeleteRouteStop:
	//   'DELETE ROUTE STOP' routeStop=[Stop] 'FROM' route=[Route];
	public DeleteRouteStopElements getDeleteRouteStopAccess() {
		return pDeleteRouteStop;
	}
	
	public ParserRule getDeleteRouteStopRule() {
		return getDeleteRouteStopAccess().getRule();
	}
	
	//PrintRoute:
	//   'PRINT ROUTE' route=[Route];
	public PrintRouteElements getPrintRouteAccess() {
		return pPrintRoute;
	}
	
	public ParserRule getPrintRouteRule() {
		return getPrintRouteAccess().getRule();
	}
	
	//PrintBus:
	//   'PRINT BUS' bus=[Bus];
	public PrintBusElements getPrintBusAccess() {
		return pPrintBus;
	}
	
	public ParserRule getPrintBusRule() {
		return getPrintBusAccess().getRule();
	}
	
	//PrintStop:
	//   'PRINT STOP' stop=[Stop];
	public PrintStopElements getPrintStopAccess() {
		return pPrintStop;
	}
	
	public ParserRule getPrintStopRule() {
		return getPrintStopAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
